key <- readline(prompt = "Provide EIA API key to continue: ")
eia.key <- readline(prompt = "Provide EIA API key to continue: ")
base.url <- paste0("http://api.eia.gov/series/?api_key=", eia.key, "&series_id=ELEC.CONS_TOT_BTU.")
base.url
state.abb[grep("New York", state.name)]
state.abb
fuel.type <- c("COW", "PEL", "PC", "NG")
full.url <- paste0(base.url, fuel.type)
full.url
full.url <- paste0(base.url, fuel.type, state.abb)
full.url
full.url <- paste0(paste0(base.url, fuel.type, "-"), stat.abb)
full.url <- paste0(paste0(base.url, fuel.type, "-"), state.abb)
full.url
?expand.grid
expand.grid(fuel.type, state.abb)
paste0(expand.grid(fuel.type, state.abb))
expand.grid(fuel.type = fuel.type, state.abb)
base.url <- paste0("http://api.eia.gov/series/?api_key=", eia.key, "&series_id=ELEC.CONS_TOT_BTU.")
expand.grid(fuel.type = c("COW", "PEL", "PC", "NG"),
state = state.abb)
full.url <- paste0(base.url, fuel.type, "-", state)
base.url <- paste0("http://api.eia.gov/series/?api_key=", eia.key, "&series_id=ELEC.CONS_TOT_BTU.")
expand.grid(fuel.type = c("COW", "PEL", "PC", "NG"),
state = state.abb)
full.url <- paste0(base.url, var$fuel.type, "-", var$state)
base.url <- paste0("http://api.eia.gov/series/?api_key=", eia.key, "&series_id=ELEC.CONS_TOT_BTU.")
var <- expand.grid(fuel.type = c("COW", "PEL", "PC", "NG"),
state = state.abb)
full.url <- paste0(base.url, var$fuel.type, "-", var$state)
full.url
base.url <- paste0("http://api.eia.gov/series/?api_key=", eia.key, "&series_id=ELEC.CONS_TOT_BTU.")
var <- expand.grid(fuel.type = c("COW", "PEL", "PC", "NG"),
state = state.abb)
full.url <- paste0(base.url, var$fuel.type, "-", var$state, "-99.M")
full.url
require("data.table")
fread(full.url[1])
require("RCurl")
test <- getURL(full.url[1])
test
require("jsonlite")
test <- fromJSON(test)
test
is.data.frame(test)
test$series
test$series$data
as.data.frame(test$series$data)
unlist(test$series$data)
require("data.table")
require("dplyr")
?do
test <- getURL(full.url[1])
test <- fromJSON(test)
test <- test$series$data
test
length(test)
length(test[[1]])
test <- data.table(unlist(test), nrow = length(test[[1]]), byrow = TRUE)
test
?data.table
test <- getURL(full.url[1])
test <- fromJSON(test)
test <- test$series$data
test <- data.frame(unlist(test), nrow = length(test[[1]]), byrow = TRUE)
test
test <- data.table(matrix(unlist(test), nrow = length(test[[1]]), byrow = TRUE))
test
test <- getURL(full.url[1])
test <- fromJSON(test)
test <- test$series$data
test <- data.table(matrix(unlist(test), nrow = length(test[[1]]), byrow = TRUE))
test
as.data.table(full.url)
?do
test <- as.data.table(full.url) %>%
group_by(1:length(full.url)) %>%
do(getURL(full.url))
test
url <- full.url[1]
json.raw <- getURL(url)
json.parsed <- fromJSON(json.raw)
data.raw <- json.parsed$series$data
json.raw <- getURL(url)
json.procd <- fromJSON(json.raw)
data.raw <- json.parsed$series$data
data.procd <- data.table(matrix(unlist(data.raw),
nrow = length(data.raw[[1]]),
byrow = TRUE))
data.procd
is.numeric(data.procd$V2)
is.factor(data.procd$V1)
json.raw <- getURL(url)
json.procd <- fromJSON(json.raw)
data.raw <- json.parsed$series$data
data.procd <- data.table(matrix(unlist(data.raw),
nrow = length(data.raw[[1]]),
byrow = TRUE)) %>%
mutate(YEAR = substr(V1, 1, 4),
MONTH = substr(V1, 5, 6),
CONSUMPTION = as.numeric(V2)) %>%
select(-V1, -V2)
data.procd
data.procd <- data.table(matrix(unlist(data.raw),
nrow = length(data.raw[[1]]),
byrow = TRUE))
data.procd$V1
data.procd$V2
data.procd$V2[1]
as.numeric(data.procd$V2[1])
as.numeric(as.character(data.procd$V2[1]))
json.raw <- getURL(url)
json.procd <- fromJSON(json.raw)
data.raw <- json.parsed$series$data
data.procd <- data.table(matrix(unlist(data.raw),
nrow = length(data.raw[[1]]),
byrow = TRUE)) %>%
mutate(YEAR = substr(V1, 1, 4),
MONTH = substr(V1, 5, 6),
CONSUMPTION = as.numeric(as.character(V2))) %>%
select(-V1, -V2)
data.procd
#+ libraries, echo=FALSE
require("data.table")
require("dplyr")
source("functions.R")
#+ license, echo=FALSE
#
# Copyright (C) 2014 Simon Garnier
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+ libraries, echo=FALSE
require("data.table")
require("dplyr")
source("functions.R")
#+ load.data, echo=FALSE
eia.key <- readline(prompt = "Provide EIA API key to continue: ")
var <- expand.grid(fuel.type = c("COW", "PEL", "PC", "NG"),
state = state.abb)
full.url <- paste0(base.url, var$fuel.type, "-", var$state, "-99.M")
eia.data <- as.data.table(full.url) %>%
group_by(1:length(full.url)) %>%
do(readEIA(full.url))
eia.data
14 * 12
(14 * 12 + 3) * 50
json.procd
(14 * 12 + 3) * 50 * 4
(13 * 12 + 3) * 50 * 4
eia.data <- as.data.table(full.url) %>%
do(readEIA(full.url))
var
eia.data <- data.table(URL = full.url,
STATE = var$state,
FUEL = var$fuel.type)
eia.data
#+ license, echo=FALSE
#
# Copyright (C) 2014 Simon Garnier
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+ libraries, echo=FALSE
require("data.table")
require("dplyr")
source("functions.R")
#+ load.data, echo=FALSE
eia.key <- readline(prompt = "Provide EIA API key to continue: ")
var <- expand.grid(fuel.type = c("COW", "PEL", "PC", "NG"),
state = state.abb)
full.url <- paste0(base.url, var$fuel.type, "-", var$state, "-99.M")
eia.data <- data.table(URL = full.url,
STATE = var$state,
FUEL = var$fuel.type) %>%
group_by(STATE, FUEL) %>%
do(readEIA(URL)) %>%
ungroup()
eia.data
write.csv("EIA.csv")
write.csv(eia.data, "EIA.csv")
eia.data <- fread("EIA.csv")
eia.data
?write.csv
base.url <- paste0("http://api.eia.gov/series/?api_key=", eia.key, "&series_id=ELEC.CONS_TOT_BTU.")
var <- expand.grid(fuel.type = c("COW", "PEL", "PC", "NG"),
state = state.abb)
full.url <- paste0(base.url, var$fuel.type, "-", var$state, "-99.M")
eia.data <- data.table(URL = full.url,
STATE = var$state,
FUEL = var$fuel.type) %>%
group_by(STATE, FUEL) %>%
do(readEIA(URL)) %>%
ungroup()
write.csv(eia.data, "EIA.csv", row.names = FALSE)
#+ license, echo=FALSE
#
# Copyright (C) 2014 Simon Garnier
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+ libraries, echo=FALSE
require("data.table")
require("dplyr")
source("functions.R")
#+ load.data, echo=FALSE
if (file.exists("EIA.csv")) {
eia.data <- fread("EIA.csv")
} else {
eia.key <- readline(prompt = "Provide EIA API key to continue: ")
base.url <- paste0("http://api.eia.gov/series/?api_key=", eia.key, "&series_id=ELEC.CONS_TOT_BTU.")
var <- expand.grid(fuel.type = c("COW", "PEL", "PC", "NG"),
state = state.abb)
full.url <- paste0(base.url, var$fuel.type, "-", var$state, "-99.M")
eia.data <- data.table(URL = full.url,
STATE = var$state,
FUEL = var$fuel.type) %>%
group_by(STATE, FUEL) %>%
do(readEIA(URL)) %>%
ungroup()
}
write.csv(eia.data, "EIA.csv", row.names = FALSE)
eia.data
require("acs")
tmp <- acs.fetch(geography = geo.make(state = "*"),
table.number = "B01003")
?acs.fetch
tmp <- acs.fetch(endyear = 2013,
geography = geo.make(state = "*"),
table.number = "B01003")
